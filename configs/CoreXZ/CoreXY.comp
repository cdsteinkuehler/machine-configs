/******************************************************************************
 *
 * Copyright (C) 2015 Charles Steinkuehler (charles AT steinkuehler DOT net)
 *
 *
 * This component computes the fairly trivial kinemetics calculations for a
 * CoreXY style machine where two fixed position motors control an effector
 * moving in two dimensions via a crossed belt/string drive arrangement.
 *
 ******************************************************************************
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 * THE AUTHORS OF THIS PROGRAM ACCEPT ABSOLUTELY NO LIABILITY FOR
 * ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
 * TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
 * harming persons must have provisions for completely removing power
 * from all motors, etc, before persons enter any danger area.  All
 * machinery must be designed to comply with local and national safety
 * codes, and the authors of this software can not, and do not, take
 * any responsibility for such compliance.
 *
 * This code was written as part of the Machinekit project.  For more
 * information, go to www.machinekit.io.
 *
 ******************************************************************************/

component CoreXY "Machinekit HAL component for driving CoreXY style kinematics";
pin   out float joint.#.pos-cmd [2] "Per-joint commanded position";
pin   in  float joint.#.pos-fb  [2] "Per-joint position feedback";
pin   in  float axis.#.pos-cmd  [2] "Commanded position from motion";
pin   out float axis.#.pos-fb   [2] "Position feedback to motion";
param rw  float axis.#.gain     [2] = 1.0 "Sets ratio of axis movement, defaults to 1:1";
function read  fp "Update axis pos-fb outputs based on joint values";
function write fp "Update joint pos-cmd outputs based on axis pos-cmd input";
description """
First line
.LP
More stuff goes here
...and here
.LP
...and here
""";
license "GPL";
;;
FUNCTION(read) {

    // Calculate Axis positions based on joint position feedback and axis gain value
    axis_pos_fb(0) = ((joint_pos_fb(0) + joint_pos_fb(1)) / axis_gain(0)) / 2.0;
    axis_pos_fb(1) = ((joint_pos_fb(0) - joint_pos_fb(1)) / axis_gain(1)) / 2.0;
}

FUNCTION(write) {
    // Calculate joint positions based on commanded axis positions and gain
    joint_pos_cmd(0) = (axis_pos_cmd(0) * axis_gain(0)) + (axis_pos_cmd(1) * axis_gain(1));
    joint_pos_cmd(1) = (axis_pos_cmd(0) * axis_gain(0)) - (axis_pos_cmd(1) * axis_gain(1));
}


